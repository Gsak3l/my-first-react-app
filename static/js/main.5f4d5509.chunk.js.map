{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","className","this","props","totalCounters","Component","Counter","state","tags","length","map","tag","key","children","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","count","Counters","onReset","counters","App","handleIncrement","index","indexOf","setState","handleDelete","counterId","filter","c","handleReset","console","log","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uSAgBeA,G,uLAbP,OACI,yBAAKC,UAAU,gCACX,0BAAMA,UAAU,eAAhB,OAEI,0BAAMA,UAAU,8BACXC,KAAKC,MAAMC,qB,GAPfC,cCqDNC,E,qLAxCP,OAA+B,IAA3BJ,KAAKK,MAAMC,KAAKC,OAAqB,gDAClC,4BAAKP,KAAKK,MAAMC,KAAKE,KAAI,SAAAC,GAAG,OAAI,wBAAIC,IAAKD,GAAMA,S,+BAWzD,IAAD,OAEI,OAGI,6BACKT,KAAKC,MAAMU,SACZ,0BAAMZ,UAAWC,KAAKY,mBAAoBZ,KAAKa,eAC/C,4BAAQC,QAAS,kBAAM,EAAKb,MAAMc,YAAY,EAAKd,MAAMe,UAAUjB,UAAU,4BAA7E,aACA,4BAAQe,QAAS,kBAAM,EAAKb,MAAMgB,SAAS,EAAKhB,MAAMe,QAAQE,KAAKnB,UAAU,6BAA7E,a,wCAQR,IAAIoB,EAAU,mBAEd,OADAA,GAAyC,IAA7BnB,KAAKC,MAAMe,QAAQI,MAAe,UAAY,Y,oCAK7D,IACiBC,EAASrB,KAAKC,MAAMe,QAA3BI,MACP,OAAiB,IAAVC,EAAc,OAASA,M,GAjDhBlB,aCyBPmB,E,iLArBV,IAAD,EACuDtB,KAAKC,MAAjDsB,EADX,EACWA,QAASC,EADpB,EACoBA,SAAUP,EAD9B,EAC8BA,SAAUF,EADxC,EACwCA,YAEpC,OACI,6BACI,4BACID,QAASS,EACTxB,UAAU,8BAFd,SAICyB,EAAShB,KAAI,SAAAQ,GAAO,OACrB,kBAAC,EAAD,CACIN,IAAKM,EAAQE,GACbH,YAAaA,EACbE,SAAUA,EACVD,QAASA,Y,GAjBNb,a,kOCsERsB,E,YAZb,aACC,IAAD,8BACE,+CAxDFpB,MACE,CACEmB,SACE,CACE,CAAEN,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,OAAQ,GACjB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,KAgDxB,EA5CAM,gBAAkB,SAAAV,GAChB,IAAMQ,EAAQ,YAAO,EAAKnB,MAAMmB,UAC1BG,EAAQH,EAASI,QAAQZ,GAC/BQ,EAASG,G,yVAAT,IAAuBX,GACvBQ,EAASG,GAAOP,QAChB,EAAKS,SAAS,CAAEL,cAuClB,EApCAM,aAAe,SAAAC,GACb,IAAMP,EAAW,EAAKnB,MAAMmB,SAASQ,QAAO,SAAAC,GAAC,OAAIA,EAAEf,KAAOa,KAC1D,EAAKF,SAAS,CAAEL,cAkClB,EA/BAU,YAAc,WAEZ,IAAMV,EAAW,EAAKnB,MAAMmB,SAAShB,KAEjC,SAAAyB,GAGE,OADAA,EAAEb,MAAQ,EACHa,KAGb,EAAKJ,SAAS,CAACL,cAuBfW,QAAQC,IAAI,mBAFd,E,sEAfE,OADAD,QAAQC,IAAI,gBAEV,kBAAC,IAAMC,SAAP,KACC,kBAAC,EAAD,CAAQnC,cAAeF,KAAKK,MAAMmB,SAASQ,QAAO,SAAAC,GAAC,OAAIA,EAAEb,MAAQ,KAAGb,SACpE,0BAAMR,UAAU,aACd,kBAAC,EAAD,CACGwB,QAASvB,KAAKkC,YACdnB,YAAaf,KAAK0B,gBAClBT,SAAUjB,KAAK8B,aACfN,SAAUxB,KAAKK,MAAMmB,iB,yDAa7BW,QAAQC,IAAI,mB,GA/DEd,GCOEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SD0H1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5f4d5509.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass NavBar extends Component {\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-light bg-light\">\r\n                <span className=\"navbar-text\">\r\n                    Home\r\n                    <span className=\"badge badge-pill secondary\">\r\n                        {this.props.totalCounters}\r\n                    </span>\r\n                </span>\r\n            </nav>\r\n        );\r\n    }\r\n}\r\n\r\nexport default NavBar;","import React, { Component } from 'react';\r\n\r\nclass Counter extends Component \r\n{\r\n    /*state = \r\n    {\r\n        value: this.props.counter.value, \r\n        tags: ['mikey']\r\n    };*/\r\n    //constructor(){super();this.handleIncrement = this.handleIncrement.bind(this);}\r\n\r\n\r\n    renderTags()\r\n    {\r\n        if (this.state.tags.length === 0) return <p>There are no tags</p>;\r\n        return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>\r\n    };\r\n\r\n    /*handleIncrement = () => //this basically allows us to use the keyword this\r\n    {\r\n        //console.log(product);\r\n        this.setState({value: this.state.value + 1}) ; //++ doesn't work\r\n    };*/\r\n    //doHandleIncrement = () => {this.handleIncrement({id:1});}; //messy way\r\n\r\n    render() \r\n    { \r\n        //console.log('props', this.props); //props is a plain javascript object\r\n        return ( /*parenthesis cannot move to the bottom because\r\n            javascript thinks that the keyword return is equal to return ;*/\r\n            //if we don't want to create a div, we can always use the <React.Fragment></React.Fragment>\r\n            <div>\r\n                {this.props.children}\r\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\r\n                <button onClick={() => this.props.onIncrement(this.props.counter)} className=\"btn btn-secondary btn-sm\">Increment</button>\r\n                <button onClick={() => this.props.onDelete(this.props.counter.id)} className=\"btn btn-danger btn-sm m-2\">Delete</button>    \r\n            </div> \r\n            //true + string = string !! e.x. true && mike = mike\r\n        );\r\n    };\r\n\r\n    getBadgeClasses() \r\n    {\r\n        let classes = \"badge m-2 badge-\";\r\n        classes += (this.props.counter.value === 0) ? \"warning\" : \"primary\";\r\n        return classes;\r\n    };\r\n    \r\n    formatCount()\r\n    {\r\n        const {value: count} = this.props.counter;\r\n        return count === 0 ? 'Zero' : count;\r\n    };\r\n}\r\nexport default Counter;\r\n//chapter named \"what happens when state changes didn't have any code\"","import React, { Component } from 'react';\r\nimport Counter from './counter'\r\n\r\nclass Counters extends Component \r\n{\r\n    render() \r\n    { \r\n        const {onReset, counters, onDelete, onIncrement} = this.props; //we pick all these from this.props\r\n\r\n        return (\r\n            <div>\r\n                <button \r\n                    onClick={onReset} \r\n                    className=\"btn btn-primary btn-sm m-2\">Reset\r\n                </button>\r\n                {counters.map(counter => \r\n                <Counter \r\n                    key={counter.id} \r\n                    onIncrement={onIncrement} \r\n                    onDelete={onDelete} \r\n                    counter={counter}>\r\n                </Counter>)}\r\n            </div>\r\n        );\r\n    };\r\n}\r\n \r\nexport default Counters;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/navbar'\nimport Counters from './components/counters';\n\nclass App extends Counters  \n{\n  state =\n    {\n      counters:\n        [\n          { id: 1, value: 4 },\n          { id: 2, value: -5 },\n          { id: 3, value: 1 },\n          { id: 4, value: 0 },\n        ]\n    };\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters]; //cloning the array\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  }\n\n  handleDelete = counterId => {\n    const counters = this.state.counters.filter(c => c.id !== counterId);\n    this.setState({ counters });\n  };\n\n  handleReset = () => \n  {\n    const counters = this.state.counters.map\n      (\n        c => \n        {\n          c.value = 0;\n          return c;\n        }\n      );\n    this.setState({counters});\n  };\n\n  render()\n  {\n    console.log(\"app-rendered\");\n    return (\n      <React.Fragment>\n       <NavBar totalCounters={this.state.counters.filter(c => c.value > 0).length}/>\n       <main className=\"container\">\n         <Counters \n            onReset={this.handleReset} \n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            counters={this.state.counters}\n          />\n      </main>\n    </React.Fragment>\n    );\n  };\n  constructor() \n  {\n    super();\n    console.log(\"app-constructor\");\n  };\n  componentDidMount()\n  {\n    console.log(\"app-mounted\");\n  };\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}